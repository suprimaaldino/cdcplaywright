name: Playwright Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        shard: [1, 2, 3]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests (shard ${{ matrix.shard }})
        run: npx playwright test --shard=${{ matrix.shard }}/3
        env:
          CI: true
          TEST_SHARD: ${{ matrix.shard }}

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.shard }}
          path: playwright-report/
          retention-days: 7

  merge-playwright-report:
    needs: test
    runs-on: ubuntu-latest
    if: always() && needs.test.result != 'cancelled'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install

      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          path: downloaded-reports/
          merge-multiple: true

      - name: Debug downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find downloaded-reports/ -type f -name "*.json" || echo "No JSON files found"
          ls -la downloaded-reports/ || echo "No downloaded-reports directory"

      - name: Merge Playwright Reports
        run: |
          mkdir -p merged-output
          if [ -d "downloaded-reports" ] && [ "$(find downloaded-reports -name '*.json' | wc -l)" -gt 0 ]; then
            npx playwright merge-reports --reporter html --config playwright.config.ts downloaded-reports/
            mv playwright-report/* merged-output/ 2>/dev/null || true
          else
            echo "No reports to merge, creating empty report"
            mkdir -p merged-output
            echo '<html><head><title>No Tests Run</title></head><body><h1>No test reports available</h1></body></html>' > merged-output/index.html
          fi

      - name: Upload merged report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-playwright-report
          path: merged-output/
          retention-days: 30

  deploy-report:
    needs: [test, merge-playwright-report]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main' && (needs.merge-playwright-report.result == 'success' || needs.test.result == 'success')
    permissions:
      pages: write
      id-token: write
      contents: read
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Try to download merged report
        id: download-merged
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: merged-playwright-report
          path: merged-report

      - name: Fallback - Download individual reports if merged failed
        if: steps.download-merged.outcome == 'failure'
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          path: individual-reports/
          merge-multiple: true

      - name: Create report directory structure
        run: |
          mkdir -p final-report
          
          # If merged report exists, use it
          if [ -d "merged-report" ] && [ "$(ls -A merged-report)" ]; then
            echo "Using merged report"
            cp -r merged-report/* final-report/
          # Otherwise, use individual reports
          elif [ -d "individual-reports" ] && [ "$(ls -A individual-reports)" ]; then
            echo "Using individual reports as fallback"
            cp -r individual-reports/* final-report/
          else
            echo "No reports found, creating placeholder"
            echo '<html><head><title>Test Reports</title></head><body><h1>No test reports available</h1><p>Tests may have failed to run or reports failed to generate.</p></body></html>' > final-report/index.html
          fi

      - name: Ensure index.html exists
        run: |
          if [ ! -f final-report/index.html ]; then
            # Look for any HTML file to redirect to
            html_file=$(find final-report -name "*.html" | head -1)
            if [ -n "$html_file" ]; then
              basename_html=$(basename "$html_file")
              echo "<html><head><meta http-equiv=\"refresh\" content=\"0; url=$basename_html\"><title>Playwright Report</title></head><body><p>Redirecting to <a href=\"$basename_html\">test report</a>...</p></body></html>" > final-report/index.html
            else
              echo '<html><head><title>No Reports</title></head><body><h1>No HTML reports found</h1></body></html>' > final-report/index.html
            fi
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: final-report/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4